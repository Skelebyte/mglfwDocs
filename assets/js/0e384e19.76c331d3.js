"use strict";(self.webpackChunkmglfw_docs=self.webpackChunkmglfw_docs||[]).push([[976],{7879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>w,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"intro","title":"Introduction","description":"MGLFW stands for \'Minimal GLFW\'. It is a wrapper for the glfw crate which aims to make using GLFW a little easier.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Introduction"},"sidebar":"tutorialSidebar","next":{"title":"Getting Started","permalink":"/docs/category/getting-started"}}');var s=t(4848),r=t(8453);const o={sidebar_position:1,title:"Introduction"},a="A minimal GLFW wrapper, written in Rust",l={},d=[{value:"Comparason between standard GLFW and MGLFW",id:"comparason-between-standard-glfw-and-mglfw",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"a-minimal-glfw-wrapper-written-in-rust",children:"A minimal GLFW wrapper, written in Rust"})}),"\n",(0,s.jsxs)(n.p,{children:["MGLFW stands for 'Minimal GLFW'. It is a wrapper for the ",(0,s.jsx)(n.a,{href:"https://crates.io/crates/glfw",children:"glfw crate"})," which aims to make using GLFW a little easier."]}),"\n",(0,s.jsx)(n.p,{children:"MGLFW is just a little side project I started work on so updates will be infrequent and probably not very good."}),"\n",(0,s.jsx)(n.h2,{id:"comparason-between-standard-glfw-and-mglfw",children:"Comparason between standard GLFW and MGLFW"}),"\n",(0,s.jsx)(n.p,{children:"To make a simple blank window that will close on the user pressing Escape, looks like this in the standard crate:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'extern crate glfw;\n\nuse glfw::{Action, Context, Key};\n\nfn main() {\n    let mut glfw = glfw::init(glfw::fail_on_errors).unwrap();\n\n    let (mut window, events) = glfw.create_window(300, 300, "Hello this is window", glfw::WindowMode::Windowed)\n        .expect("Failed to create GLFW window.");\n\n    window.set_key_polling(true);\n    window.make_current();\n\n    while !window.should_close() {\n        glfw.poll_events();\n        for (_, event) in glfw::flush_messages(&events) {\n            match event {\n                glfw::WindowEvent::Key(Key::Escape, _, Action::Press, _) => {\n                    window.set_should_close(true)\n                }\n                _ => {}\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now if you were to use MGLFW, it looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'mod mglfw;\n\nuse mglfw::{core, input};\n\nfn main() {\n    let mut mglfw = core::Mglfw::new("Hello this is window", 300, 300);\n    let mut input = input::Input::init();\n\n    let esc = input.new("esc", input::KeyCode::Escape, input::Activation::Press);\n\n    while mglfw.is_running() {\n        mglfw.input_update();\n\n        if input.is_bind_active(&mglfw, &esc) {\n            mglfw.quit();\n        }\n    }\n}\n'})})]})}function w(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);